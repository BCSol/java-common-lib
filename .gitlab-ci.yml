stages:
  - dependencies
  - build
  - checks

image: registry.gitlab.com/sosy-lab/software/java-common-lib/test:latest

variables:
  IVY_CACHE_DIR: "${CI_PROJECT_DIR}/.ivy2"
  ANT_PROPS_BUILD: "-Divy.disable=true"
  ANT_PROPS_CHECKS: "-Divy.disable=true -DskipBuild=true"


# Download dependencies and provide them to later stages
build-dependencies:
  stage: dependencies
  script: "ant build-dependencies"
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ".ivy2/"
  artifacts:
    paths:
      - "lib/java/"


# Build binaries and provide them to later stages
build:
  stage: build
  script: "ant $ANT_PROPS_BUILD jar"
  artifacts:
    paths:
      - "bin/"
      - "*.jar"


# For checks that need the binaries
.binary_check: &binary_check
  stage: checks

# For checks that only need the source code, not the binaries
.source_check: &source_check
  stage: checks
  dependencies:
    - build-dependencies


build-project-ecj:
  <<: *source_check
  script: "ant $ANT_PROPS_BUILD build-project-ecj"

check-format:
  <<: *source_check
  script: "ant $ANT_PROPS_CHECKS format-source && git diff -s --exit-code"

checkstyle:
  <<: *source_check
  script:
    - "ant $ANT_PROPS_CHECKS checkstyle"
    - "ant $ANT_PROPS_CHECKS run-checkstyle -Dcheckstyle.output=plain && cat Checkstyle*.xml && test $(cat Checkstyle*xml | grep -vic audit) -eq 0"
  artifacts:
    paths:
      - "Checkstyle*html"
    when: on_failure

javadoc:
  <<: *source_check
  script: "ant $ANT_PROPS_CHECKS javadoc"
  artifacts:
    paths:
      - "Javadoc/"

spotbugs:
  <<: *binary_check
  script:
    - 'ant $ANT_PROPS_CHECKS spotbugs'
    - 'ant $ANT_PROPS_CHECKS run-spotbugs -Dspotbugs.output=text && cat SpotBugs.xml && test \! -s SpotBugs.xml'
  artifacts:
    paths:
      - "SpotBugs.html"
    when: on_failure

unit-tests:
  <<: *binary_check
  script: "ant $ANT_PROPS_CHECKS unit-tests-coverage"
  artifacts:
    paths:
      - "JUnit.html"
      - "JUnit-coverage/"
    when: always
